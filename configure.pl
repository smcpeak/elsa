#!/usr/bin/perl -w
# configure script for elsa

use strict 'subs';

# defaults
$SMBASE = "../smbase";
$AST = "../ast";
$ELKHOUND = "../elkhound";
$PERL = "perl";
$GCOV_MODS = "";
$USE_GNU = "1";
$USE_KANDR = "1";
@CCFLAGS = ("-g", "-Wall", "-std=c++11");
@LDFLAGS = ("-g -Wall");


sub usage {
  print(<<"EOF");
package options:
  -prof              enable profiling
  -gcov=<mods>       enable coverage testing for modules <mods>
  -devel             add options useful while developing (-Werror)
  -gnu=[0/1]         enable GNU extensions? [$USE_GNU]
  -kandr=[0/1]       enable K&R extensions? [$USE_KANDR]
  -ast=<dir>:        specify where the ast system is [$AST]
  -elkhound=<dir>:   specify where the elkhound system is [$ELKHOUND]
  -useSerialNumbers: give serial numbers to some objects for debugging
EOF
}

# get an argument to an option
sub getOptArg {
  if (!$value) {
    die("option $option requires an argument\n");
  }
  return $value;
}

# for a boolean option:
#   -foo       -> true
#   -foo=1     -> true
#   -foo=0     -> false
sub getBoolArg {
  if ($value eq "" || $value eq "1") {
    return 1;
  }
  elsif ($value eq "0") {
    return 0;
  }
  else {
    die("option $option expects either no argument, or arg 0 or 1\n");
  }
}


sub run {
  my $code = system(@_);
  checkExitCode($code);
}

sub checkExitCode {
  my ($code) = @_;
  if ($code != 0) {
    # hopefully the command has already printed a message,
    # I'll just relay the status code
    if ($code >> 8) {
      exit($code >> 8);
    }
    else {
      exit($code & 127);
    }
  }
}


# global variables holding information about the current command-line
# option being processed
$option = "";
$value = "";

# process command-line arguments
foreach $optionAndValue (@ARGV) {
  # ignore leading '-' characters, and split at first '=' (if any)
  ($option, $value) =
    ($optionAndValue =~ m/^-*([^-][^=]*)=?(.*)$/);
                      #      option     = value

  my $arg = $option;

  if (0) {}

  elsif ($arg eq "prof") {
    push @CCFLAGS, "-pg";
    push @LDFLAGS, "-pg";
  }

  elsif ($arg eq "gcov") {
    $GCOV_MODS = getOptArg();
  }

  elsif ($arg eq "devel") {
    push @CCFLAGS, "-Werror";
  }

  elsif ($arg eq "ast") {
    $AST = getOptArg();
  }
  elsif ($arg eq "elkhound") {
    $ELKHOUND = getOptArg();
  }

  elsif ($arg eq "gnu") {
    $USE_GNU = getBoolArg();
  }
  elsif ($arg eq "kandr") {
    $USE_KANDR = getBoolArg();
  }

  elsif ($arg eq "useSerialNumbers") {
    push @CCFLAGS, "-DUSE_SERIAL_NUMBERS=1";
  }

  else {
    die "unknown option: $arg\n";
  }
}


# ------------------ config.summary -----------------
$summary = <<"OUTER_EOF";
cat <<EOF
  LDFLAGS:         @LDFLAGS
  SMBASE:          $SMBASE
  AST:             $AST
  ELKHOUND:        $ELKHOUND
  USE_GNU:         $USE_GNU
  USE_KANDR:       $USE_KANDR
EOF
OUTER_EOF

if ($GCOV_MODS) {
  $summary .= "echo \"  GCOV_MODS:   $GCOV_MODS\"\n";
}

sub writeConfigSummary {
  my ($summary) = @_;

  open (OUT, ">config.summary") or die("cannot write config.summary: $!\n");

  print OUT ($summary);
  print OUT ("echo \"\"\n");

  close(OUT) or die;
  chmod 0755, "config.summary";
}

writeConfigSummary($summary);


# ------------------- config.status ------------------
sub writeConfigStatus {
  my @pairs = @_;

  # create a program which will create config.mk
  open(OUT, ">config.status") or die("can't make config.status");

  # preamble
  print OUT (<<"OUTER_EOF");
#!/bin/sh
# config.status

# this file was created by ./configure

if [ "\$1" = "-reconfigure" ]; then
  # re-issue the ./configure command
  exec ./configure @ARGV
fi

# report on configuration
./config.summary

echo "creating config.mk ..."

# overcome my chmod below
rm -f config.mk

cat >config.mk <<EOF
# elsa/config.mk
# NOTE: generated by ./configure, do not edit

EOF

# variable substitution
sed -e "s|\@CCFLAGS\@|@CCFLAGS|g" \\
    -e "s|\@SMBASE\@|$SMBASE|g" \\
OUTER_EOF

  # package-specific substitution
  for ($i=0; $i < @pairs; $i += 2) {
    my $a = $pairs[$i];
    my $b = $pairs[$i+1];
    #           -e  "s|@foo@|bar|g" \           (example)
    print OUT ("-e \"s|\@$a\@|$b|g\" \\\n");
  }

  # postamble
  print OUT (<<"EOF");
  <config.mk.in >>config.mk

# discourage editing ..
chmod a-w config.mk


EOF

  close(OUT) or die;
  chmod 0755, "config.status";
}


writeConfigStatus("LDFLAGS" => "@LDFLAGS",
                  "SMBASE" => "$SMBASE",
                  "AST" => "$AST",
                  "ELKHOUND" => "$ELKHOUND",
                  "PERL" => "$PERL",
                  "USE_GNU" => "$USE_GNU",
                  "USE_KANDR" => "$USE_KANDR",
                  "GCOV_MODS" => "$GCOV_MODS");


# ----------------- final actions -----------------
# run the output file generator
run("./config.status");

print("\nYou can now run make, usually called 'make' or 'gmake'.\n");

exit(0);
