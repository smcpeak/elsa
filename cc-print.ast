// cc-print.ast            see license.txt for copyright and terms of use
// extension module for cc.ast that supports printing C++
// syntax from the AST

verbatim {
  class PrintEnv;                      // cc-print.h

  #include "operator-precedence.h"     // OperatorPrecedence
}


class TranslationUnit {
  // This is the toplevel entry point to the pretty printer.
  public void print(PrintEnv &env) const;
}


class TopForm {
  pure_virtual void print(PrintEnv &env) const;
}


class Function {
  // When printing the function, suppress printing any DeclFlags that
  // are not in 'declFlagMask'.
  public void print(PrintEnv &env, DeclFlags declFlagsMask = ALL_DECLFLAGS) const;
}


class Declaration {
  public void print(PrintEnv &env) const;
}


class ASTTypeId {
  public void print(PrintEnv &env) const;
}


class PQName {
  pure_virtual void print(PrintEnv &env) const;
}


class TypeSpecifier {
  public void print(PrintEnv &env) const;
  pure_virtual void iprint(PrintEnv &env) const;
}


class BaseClassSpec {
  public void print(PrintEnv &env) const;
}


class Member {
  pure_virtual void print(PrintEnv &env) const;
}


class Enumerator {
  public void print(PrintEnv &env) const;
}


class Declarator {
  public void print(PrintEnv &env) const;
}


class IDeclarator {
  pure_virtual void print(PrintEnv &env) const;
}


class ExceptionSpec {
  public void print(PrintEnv &env) const;
}


class OperatorName {
  // Print the full name, including "operator".
  pure_virtual void print(PrintEnv &env) const;
}


class Statement {
  public void print(PrintEnv &env) const;
  pure_virtual void iprint(PrintEnv &env) const;
}


class Condition {
  pure_virtual void print(PrintEnv &env) const;
}


class Handler {
  public void print(PrintEnv &env) const;
}


class FullExpression {
  public void print(PrintEnv &env) const;
}


class Expression {
  // Print this expression to 'env'.  The precedence of the parent
  // operator is in 'parentPrec', and is used to decide whether to
  // print parentheses around this expression.
  public void print(PrintEnv &env, OperatorPrecedence parentPrec) const;

  // Print the expression without outer parentheses.
  pure_virtual void iprint(PrintEnv &env) const;

  // Get the precedence for this expression.
  pure_virtual OperatorPrecedence getPrecedence() const;

  public string exprToString() const;
  public string asString() const { return exprToString(); };
}

verbatim {
  // for debugging
  char *expr_toString(Expression const *e);
  int expr_debugPrint(Expression const *e);
}


class Initializer {
  pure_virtual void print(PrintEnv &env, bool outermost=true) const;
}


class TemplateDeclaration {
  public void print(PrintEnv &env) const;
  pure_virtual void iprint(PrintEnv &env) const;
}


class TemplateParameter {
  pure_virtual void print(PrintEnv &env) const;
}


class TemplateArgument {
  pure_virtual void print(PrintEnv &env) const;
}


class NamespaceDecl {
  pure_virtual void print(PrintEnv &env) const;
}
