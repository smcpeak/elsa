#!/usr/bin/env python3
# Generate chained-labels.c like this:
#   ./gen-chained-labels.py > chained-labels.c

print(
"""// chained-labels.c
// This file is generated by the gen-chained-labels.py script.

// Its purpose is to exercise all combinations of two successive
// label-like elements, both with and without a trailing semicolon.
// Label-like elements are default, case, GNU range case, and actual
// goto labels.

// Repeated 'default' is not valid C/C++, but Elsa currently accepts
// it, so this script generates it.
""")

def get_label(index, start):
  """Get one label-like element, using 'start' if needed to ensure
  uniqueness."""
  if index==0:
    return "default"
  elif index==1:
    return f"case {start}";
  elif index==2:
    return f"case {start} ... {start+1}";
  elif index==3:
    return f"label{start}";

# Loop over all 16 combinations.
for label_index1 in range(0, 4):
  for label_index2 in range(0, 4):
    label1 = get_label(label_index1, 1)
    label2 = get_label(label_index2, 3)

    # Emit one function definition.
    print(f"""
void f_{label_index1}_{label_index2}(int x)
{{
  switch (x) {{
    {label1}:
    {label2}:
      ;
  }}
}}""")

# EOF
