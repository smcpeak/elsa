---- stdout ----
// ---- START ----
// -*- c++ -*-
typedef struct Complete {
  int x;
  int y;
} Complete;

Complete c1 = { 1, 2 };

static int test_c1()
{
  return c1.x == 1 && c1.y == 2 && 1;
}

typedef struct Incomplete Incomplete;

int arr1[3] = { 1, 2, 3 };

int arr2[] = { 1, 2, 3 };

static int test_arr1_arr2()
{
  return *(arr1+0) == 1 && *(arr1+1) == 2 && *(arr1+2) == 3 &&
           *(arr2+0) == 1 && *(arr2+1) == 2 && *(arr2+2) == 3 &&
           sizeof(arr2) / sizeof(*(arr2+0)) == 3 && 1;
}

int arr23a[2][3] = { { 0, 1, 2 }, { 3, 4, 5 } };

int arr23b[][3] = { { 0, 1, 2 }, { 3, 4, 5 } };

static int test_arr23ab()
{
  for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 3; j++) {
      if (*(*(arr23a+i) + j) != i*3 + j) {
        return 0;
      }
      if (*(*(arr23b+i) + j) != i*3 + j) {
        return 0;
      }
    }
  }
  return sizeof(arr23b) / sizeof(*(arr23b+0)) == 2;
}

int init_variable_length_array(int sz)
{
  return sz;
}

typedef struct HasFlexArray {
  int x;
  int a[];
} HasFlexArray;

HasFlexArray hfa3 = { 1 };

typedef struct ContainsHFA {
  int z;
} ContainsHFA;

int main()
{
  if (1 && test_c1() && test_arr1_arr2() && test_arr23ab() && 1) {
    return 0;
  }
  else {
    return 1;
  }
}

// ---- STOP ----
---- stderr ----
---- exit status ----
Exit 0
