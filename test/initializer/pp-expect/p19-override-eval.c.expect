---- stdout ----
p19-override-eval.c:29:11: warning: Initializer for array index 0 overrides previous initializer at p19-override-eval.c:28:11.
p19-override-eval.c:52:10: warning: Initializer for field 'x' overrides previous initializer at p19-override-eval.c:51:10.
p19-override-eval.c:74:10: warning: Initializer for union field 'y' overrides previous initializer for different field 'x' at p19-override-eval.c:73:10.
p19-override-eval.c:94:10: warning: Initializer for union field 'y' overrides previous initializer for different field 'x' at p19-override-eval.c:93:10.
// ---- START ----
// -*- c++ -*-
extern int printf(char const *format, ...);

static int get(int v)
{
  printf("  called get(%d)\n", v);
  return v;
}

static int test_array()
{
  printf("test_array:\n");
  int arr[2] = { get(2), 3 };
  return *(arr+0) == 2 && *(arr+1) == 3 && 1;
}

typedef struct S {
  int x;
  int y;
} S;

static int test_struct()
{
  printf("test_struct:\n");
  S s = { get(2), 3 };
  return s.x == 2 && s.y == 3 && 1;
}

typedef union U {
  int x;
  char y;
} U;

static int test_union_no_side_effect()
{
  U u = { .y = 2 };
  return u.x == 2 && u.y == 2 && 1;
}

static int test_union()
{
  printf("test_union:\n");
  U u = { .y = get(2) };
  return u.x == 2 && u.y == 2 && 1;
}

int main()
{
  return test_array() && test_struct() && test_union_no_side_effect() &&
           test_union() && 1?
           0 :
           1;
}

// ---- STOP ----
---- stderr ----
---- exit status ----
Exit 0
