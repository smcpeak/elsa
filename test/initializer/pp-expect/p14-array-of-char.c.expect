---- stdout ----
---- START ----
// -*-c++-*-
char str_hello[6] = "hello";

static int test_str_hello()
{
  return *(str_hello+0) == 'h' && *(str_hello+1) == 'e' &&
           *(str_hello+2) == 'l' && *(str_hello+3) == 'l' &&
           *(str_hello+4) == 'o' && *(str_hello+5) == '\0' &&
           sizeof(str_hello) == 6 && 1;
}

char str_short_init[6] = "hi";

static int test_str_short_init()
{
  return *(str_short_init+0) == 'h' && *(str_short_init+1) == 'i' &&
           *(str_short_init+2) == '\0' && *(str_short_init+3) == '\0' &&
           *(str_short_init+4) == '\0' && *(str_short_init+5) == '\0' &&
           sizeof(str_short_init) == 6 && 1;
}

char str_unspec_size[] = "hello";

static int test_str_unspec_size()
{
  return *(str_unspec_size+0) == 'h' && *(str_unspec_size+1) == 'e' &&
           *(str_unspec_size+2) == 'l' && *(str_unspec_size+3) == 'l' &&
           *(str_unspec_size+4) == 'o' && *(str_unspec_size+5) == '\0' &&
           sizeof(str_unspec_size) == 6 && 1;
}

char str_trunc_nul[5] = "hello";

static int test_str_trunc_nul()
{
  return *(str_trunc_nul+0) == 'h' && *(str_trunc_nul+1) == 'e' &&
           *(str_trunc_nul+2) == 'l' && *(str_trunc_nul+3) == 'l' &&
           *(str_trunc_nul+4) == 'o' && sizeof(str_trunc_nul) == 5 && 1;
}

unsigned char str_unsigned_char[3] = "hi";

static int test_str_unsigned_char()
{
  return *(str_unsigned_char+0) == 'h' && *(str_unsigned_char+1) == 'i' &&
           *(str_unsigned_char+2) == '\0' &&
           sizeof(str_unsigned_char) == 3 && 1;
}

signed char str_signed_char[3] = "hi";

static int test_str_signed_char()
{
  return *(str_signed_char+0) == 'h' && *(str_signed_char+1) == 'i' &&
           *(str_signed_char+2) == '\0' && sizeof(str_signed_char) == 3 &&
           1;
}

char str_braces[3] = "hi";

static int test_str_braces()
{
  return *(str_braces+0) == 'h' && *(str_braces+1) == 'i' &&
           *(str_braces+2) == '\0' && sizeof(str_braces) == 3 && 1;
}

char str_braces_trunc_nul[3] = "hix";

static int test_str_braces_trunc_nul()
{
  return *(str_braces_trunc_nul+0) == 'h' &&
           *(str_braces_trunc_nul+1) == 'i' &&
           *(str_braces_trunc_nul+2) == 'x' &&
           sizeof(str_braces_trunc_nul) == 3 && 1;
}

typedef struct S {
  int x;
  char arr[3];
} S;

S s_baseline = { 1, "hi" };

static int test_s_baseline()
{
  return s_baseline.x =
           1 && *(s_baseline.arr + 0) == 'h' &&
             *(s_baseline.arr + 1) == 'i' &&
             *(s_baseline.arr + 2) == '\0' &&
             sizeof(s_baseline.arr) == 3 && 1;
}

S s_nul_trunc = { 1, "hix" };

static int test_s_nul_trunc()
{
  return s_nul_trunc.x =
           1 && *(s_nul_trunc.arr + 0) == 'h' &&
             *(s_nul_trunc.arr + 1) == 'i' &&
             *(s_nul_trunc.arr + 2) == 'x' &&
             sizeof(s_nul_trunc.arr) == 3 && 1;
}

S s_braces = { 1, "hi" };

static int test_s_braces()
{
  return s_braces.x =
           1 && *(s_braces.arr + 0) == 'h' && *(s_braces.arr + 1) == 'i' &&
             *(s_braces.arr + 2) == '\0' && sizeof(s_braces.arr) == 3 &&
             1;
}

S s_designator = { 1, "hi" };

static int test_s_designator()
{
  return s_designator.x =
           1 && *(s_designator.arr + 0) == 'h' &&
             *(s_designator.arr + 1) == 'i' &&
             *(s_designator.arr + 2) == '\0' &&
             sizeof(s_designator.arr) == 3 && 1;
}

S s_designator_swap = { 1, "hi" };

static int test_s_designator_swap()
{
  return s_designator_swap.x =
           1 && *(s_designator_swap.arr + 0) == 'h' &&
             *(s_designator_swap.arr + 1) == 'i' &&
             *(s_designator_swap.arr + 2) == '\0' &&
             sizeof(s_designator_swap.arr) == 3 && 1;
}

S s_designator_braces = { 1, "hi" };

static int test_s_designator_braces()
{
  return s_designator_braces.x =
           1 && *(s_designator_braces.arr + 0) == 'h' &&
             *(s_designator_braces.arr + 1) == 'i' &&
             *(s_designator_braces.arr + 2) == '\0' &&
             sizeof(s_designator_braces.arr) == 3 && 1;
}

typedef union U {
  char arr[4];
  int x;
} U;

U u_baseline = { "ABC" };

static int test_u_baseline()
{
  return *(u_baseline.arr + 0) == 'A' && *(u_baseline.arr + 1) == 'B' &&
           *(u_baseline.arr + 2) == 'C' && *(u_baseline.arr + 3) == '\0' &&
           u_baseline.x == 0x00434241 && sizeof(u_baseline.arr) == 4 &&
           1;
}

U u_braces = { "ABC" };

static int test_u_braces()
{
  return *(u_braces.arr + 0) == 'A' && *(u_braces.arr + 1) == 'B' &&
           *(u_braces.arr + 2) == 'C' && *(u_braces.arr + 3) == '\0' &&
           sizeof(u_braces.arr) == 4 && 1;
}

U u_designator = { "ABC" };

static int test_u_designator()
{
  return *(u_designator.arr + 0) == 'A' &&
           *(u_designator.arr + 1) == 'B' &&
           *(u_designator.arr + 2) == 'C' &&
           *(u_designator.arr + 3) == '\0' &&
           sizeof(u_designator.arr) == 4 && 1;
}

char aoa_baseline[2][3] = { "ab", "yz" };

static int test_aoa_baseline()
{
  return *(*(aoa_baseline+0) + 0) == 'a' &&
           *(*(aoa_baseline+0) + 1) == 'b' &&
           *(*(aoa_baseline+0) + 2) == '\0' &&
           *(*(aoa_baseline+1) + 0) == 'y' &&
           *(*(aoa_baseline+1) + 1) == 'z' &&
           *(*(aoa_baseline+1) + 2) == '\0' && sizeof(aoa_baseline) == 6 &&
           sizeof(*(aoa_baseline+0)) == 3 && 1;
}

char aoa_nul_trunc[2][3] = { "abc", "xyz" };

static int test_aoa_nul_trunc()
{
  return *(*(aoa_nul_trunc+0) + 0) == 'a' &&
           *(*(aoa_nul_trunc+0) + 1) == 'b' &&
           *(*(aoa_nul_trunc+0) + 2) == 'c' &&
           *(*(aoa_nul_trunc+1) + 0) == 'x' &&
           *(*(aoa_nul_trunc+1) + 1) == 'y' &&
           *(*(aoa_nul_trunc+1) + 2) == 'z' &&
           sizeof(aoa_nul_trunc) == 6 && sizeof(*(aoa_nul_trunc+0)) == 3 &&
           1;
}

char aoa_designator[2][3] = { "ab", "yz" };

static int test_aoa_designator()
{
  return *(*(aoa_designator+0) + 0) == 'a' &&
           *(*(aoa_designator+0) + 1) == 'b' &&
           *(*(aoa_designator+0) + 2) == '\0' &&
           *(*(aoa_designator+1) + 0) == 'y' &&
           *(*(aoa_designator+1) + 1) == 'z' &&
           *(*(aoa_designator+1) + 2) == '\0' &&
           sizeof(aoa_designator) == 6 &&
           sizeof(*(aoa_designator+0)) == 3 && 1;
}

char aoa_designator_swap[2][3] = { "ab", "yz" };

static int test_aoa_designator_swap()
{
  return *(*(aoa_designator_swap+0) + 0) == 'a' &&
           *(*(aoa_designator_swap+0) + 1) == 'b' &&
           *(*(aoa_designator_swap+0) + 2) == '\0' &&
           *(*(aoa_designator_swap+1) + 0) == 'y' &&
           *(*(aoa_designator_swap+1) + 1) == 'z' &&
           *(*(aoa_designator_swap+1) + 2) == '\0' &&
           sizeof(aoa_designator_swap) == 6 &&
           sizeof(*(aoa_designator_swap+0)) == 3 && 1;
}

char aoa_unspec_major_dim[][3] = { "ab", "yz" };

static int test_aoa_unspec_major_dim()
{
  return *(*(aoa_unspec_major_dim+0) + 0) == 'a' &&
           *(*(aoa_unspec_major_dim+0) + 1) == 'b' &&
           *(*(aoa_unspec_major_dim+0) + 2) == '\0' &&
           *(*(aoa_unspec_major_dim+1) + 0) == 'y' &&
           *(*(aoa_unspec_major_dim+1) + 1) == 'z' &&
           *(*(aoa_unspec_major_dim+1) + 2) == '\0' &&
           sizeof(aoa_unspec_major_dim) == 6 &&
           sizeof(*(aoa_unspec_major_dim+0)) == 3 && 1;
}

char aoa_braces[2][3] = { "ab", "yz" };

static int test_aoa_braces()
{
  return *(*(aoa_braces+0) + 0) == 'a' && *(*(aoa_braces+0) + 1) == 'b' &&
           *(*(aoa_braces+0) + 2) == '\0' &&
           *(*(aoa_braces+1) + 0) == 'y' &&
           *(*(aoa_braces+1) + 1) == 'z' &&
           *(*(aoa_braces+1) + 2) == '\0' && sizeof(aoa_braces) == 6 &&
           sizeof(*(aoa_braces+0)) == 3 && 1;
}

int main()
{
  if (test_str_hello() && test_str_short_init() &&
        test_str_unspec_size() && test_str_trunc_nul() &&
        test_str_unsigned_char() && test_str_signed_char() &&
        test_str_braces() && test_str_braces_trunc_nul() &&
        test_s_baseline() && test_s_nul_trunc() && test_s_braces() &&
        test_s_designator() && test_s_designator_swap() &&
        test_s_designator_braces() && test_u_baseline() &&
        test_u_braces() && test_u_designator() && test_aoa_baseline() &&
        test_aoa_nul_trunc() && test_aoa_designator() &&
        test_aoa_designator_swap() && test_aoa_unspec_major_dim() &&
        test_aoa_braces() && 1) {
    return 0;
  }
  else {
    return 1;
  }
}

---- STOP ----
---- stderr ----
---- exit status ----
Exit 0
